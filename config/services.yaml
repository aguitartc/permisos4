# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: parameters.yaml}

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $locales: '%app_locales%'
            $defaultLocale: '%locale%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.cas_authenticator:
        class: App\Security\CasJasigAuthenticator
        arguments: [ '%cas_host%', '%cas_port%', '%cas_context%', '%cas_ca_chain%' ]

    logout_cas_upc:
        class: App\Utils\LogoutCasUpc
        arguments: [ '%cas_host%', '%cas_port%', '%cas_context%', '%cas_ca_chain%' ]

    app.user_provider:
        class: App\Security\UserProvider
        arguments: [ "@=service('doctrine.orm.entity_manager').getRepository('App:User')" ]

    app.redirect_to_preferred_locale_listener:
        class: App\EventListener\RedirectToPreferredLocaleListener
        arguments: [ '@router', '%app_locales%', '%locale%' ]
        tags:
            - { name: kernel.event_listener, event: kernel.exception , method: onKernelRequest }